import {
  AudioMimeType,
  BytesHasPrefix,
  GetArrayBuffer,
  GetCoverFromFile,
  GetMetaFromFile,
  SniffAudioExt,
} from '@/decrypt/utils';
import { parseBlob as metaParseBlob } from 'music-metadata-browser';
import { DecryptResult } from '@/decrypt/entity';
import config from '@/../package.json';

//prettier-ignore
const VprHeader = [
  0x05, 0x28, 0xBC, 0x96, 0xE9, 0xE4, 0x5A, 0x43,
  0x91, 0xAA, 0xBD, 0xD0, 0x7A, 0xF5, 0x36, 0x31
]
//prettier-ignore
const KgmHeader = [
  0x7C, 0xD5, 0x32, 0xEB, 0x86, 0x02, 0x7F, 0x4B,
  0xA8, 0xAF, 0xA6, 0x8E, 0x0F, 0xFF, 0x99, 0x14
]
//prettier-ignore
const VprMaskDiff = [
  0x25, 0xDF, 0xE8, 0xA6, 0x75, 0x1E, 0x75, 0x0E,
  0x2F, 0x80, 0xF3, 0x2D, 0xB8, 0xB6, 0xE3, 0x11,
  0x00
]

export async function Decrypt(file: File, raw_filename: string, raw_ext: string): Promise<DecryptResult> {
  const oriData = new Uint8Array(await GetArrayBuffer(file));
  if (raw_ext === 'vpr') {
    if (!BytesHasPrefix(oriData, VprHeader)) throw Error('Not a valid vpr file!');
  } else {
    if (!BytesHasPrefix(oriData, KgmHeader)) throw Error('Not a valid kgm(a) file!');
  }
  let bHeaderLen = new DataView(oriData.slice(0x10, 0x14).buffer);
  let headerLen = bHeaderLen.getUint32(0, true);

  let audioData = oriData.slice(headerLen);
  let dataLen = audioData.length;
  if (audioData.byteLength > 1 << 26) {
    throw Error("文件过大，请使用 <a target='_blank' href='https://github.com/unlock-music/cli'>CLI版本</a> 进行解锁");
  }

  let key1 = new Uint8Array(17);
  key1.set(oriData.slice(0x1c, 0x2c), 0);
  if (MaskV2.length === 0) {
    if (!(await LoadMaskV2())) throw Error('加载Kgm/Vpr Mask数据失败');
  }

  for (let i = 0; i < dataLen; i++) {
    let med8 = key1[i % 17] ^ audioData[i];
    med8 ^= (med8 & 0xf) << 4;

    let msk8 = GetMask(i);
    msk8 ^= (msk8 & 0xf) << 4;
    audioData[i] = med8 ^ msk8;
  }
  if (raw_ext === 'vpr') {
    for (let i = 0; i < dataLen; i++) audioData[i] ^= VprMaskDiff[i % 17];
  }

  const ext = SniffAudioExt(audioData);
  const mime = AudioMimeType[ext];
  let musicBlob = new Blob([audioData], { type: mime });
  const musicMeta = await metaParseBlob(musicBlob);
  const { title, artist } = GetMetaFromFile(raw_filename, musicMeta.common.title, musicMeta.common.artist);
  return {
    album: musicMeta.common.album,
    picture: GetCoverFromFile(musicMeta),
    file: URL.createObjectURL(musicBlob),
    blob: musicBlob,
    ext,
    mime,
    title,
    artist,
  };
}

function GetMask(pos: number) {
  return MaskV2PreDef[pos % 272] ^ MaskV2[pos >> 4];
}

let MaskV2: Uint8Array = new Uint8Array(0);

async function LoadMaskV2(): Promise<boolean> {
  let mask_url = `https://cdn.jsdelivr.net/gh/unlock-music/unlock-music@${config.version}/public/static/kgm.mask`;
  if (['http:', 'https:'].some((v) => v == self.location.protocol)) {
    if (!!self.document) {
      // using Web Worker
      mask_url = './static/kgm.mask';
    } else {
      // using Main thread
      mask_url = '../static/kgm.mask';
    }
  }
  try {
    const resp = await fetch(mask_url, { method: 'GET' });
    MaskV2 = new Uint8Array(await resp.arrayBuffer());
    return true;
  } catch (e) {
    console.error(e);
    return false;
  }
}

//prettier-ignore
const MaskV2PreDef = [
  0xb8, 0xd5, 0x3d, 0xb2, 0xe9, 0xaf, 0x78, 0x8c,
  0x83, 0x33, 0x71, 0x51, 0x76, 0xa0, 0xcd, 0x37,
  0x2f, 0x3e, 0x35, 0x8d, 0xa9, 0xbe, 0x98, 0xb7,
  0xe7, 0x8c, 0x22, 0xce, 0x5a, 0x61, 0xdf, 0x68,
  0x69, 0x89, 0xfe, 0xa5, 0xb6, 0xde, 0xa9, 0x77,
  0xfc, 0xc8, 0xbd, 0xbd, 0xe5, 0x6d, 0x3e, 0x5a,
  0x36, 0xef, 0x69, 0x4e, 0xbe, 0xe1, 0xe9, 0x66,
  0x1c, 0xf3, 0xd9, 0x02, 0xb6, 0xf2, 0x12, 0x9b,
  0x44, 0xd0, 0x6f, 0xb9, 0x35, 0x89, 0xb6, 0x46,
  0x6d, 0x73, 0x82, 0x06, 0x69, 0xc1, 0xed, 0xd7,
  0x85, 0xc2, 0x30, 0xdf, 0xa2, 0x62, 0xbe, 0x79,
  0x2d, 0x62, 0x62, 0x3d, 0x0d, 0x7e, 0xbe, 0x48,
  0x89, 0x23, 0x02, 0xa0, 0xe4, 0xd5, 0x75, 0x51,
  0x32, 0x02, 0x53, 0xfd, 0x16, 0x3a, 0x21, 0x3b,
  0x16, 0x0f, 0xc3, 0xb2, 0xbb, 0xb3, 0xe2, 0xba,
  0x3a, 0x3d, 0x13, 0xec, 0xf6, 0x01, 0x45, 0x84,
  0xa5, 0x70, 0x0f, 0x93, 0x49, 0x0c, 0x64, 0xcd,
  0x31, 0xd5, 0xcc, 0x4c, 0x07, 0x01, 0x9e, 0x00,
  0x1a, 0x23, 0x90, 0xbf, 0x88, 0x1e, 0x3b, 0xab,
  0xa6, 0x3e, 0xc4, 0x73, 0x47, 0x10, 0x7e, 0x3b,
  0x5e, 0xbc, 0xe3, 0x00, 0x84, 0xff, 0x09, 0xd4,
  0xe0, 0x89, 0x0f, 0x5b, 0x58, 0x70, 0x4f, 0xfb,
  0x65, 0xd8, 0x5c, 0x53, 0x1b, 0xd3, 0xc8, 0xc6,
  0xbf, 0xef, 0x98, 0xb0, 0x50, 0x4f, 0x0f, 0xea,
  0xe5, 0x83, 0x58, 0x8c, 0x28, 0x2c, 0x84, 0x67,
  0xcd, 0xd0, 0x9e, 0x47, 0xdb, 0x27, 0x50, 0xca,
  0xf4, 0x63, 0x63, 0xe8, 0x97, 0x7f, 0x1b, 0x4b,
  0x0c, 0xc2, 0xc1, 0x21, 0x4c, 0xcc, 0x58, 0xf5,
  0x94, 0x52, 0xa3, 0xf3, 0xd3, 0xe0, 0x68, 0xf4,
  0x00, 0x23, 0xf3, 0x5e, 0x0a, 0x7b, 0x93, 0xdd,
  0xab, 0x12, 0xb2, 0x13, 0xe8, 0x84, 0xd7, 0xa7,
  0x9f, 0x0f, 0x32, 0x4c, 0x55, 0x1d, 0x04, 0x36,
  0x52, 0xdc, 0x03, 0xf3, 0xf9, 0x4e, 0x42, 0xe9,
  0x3d, 0x61, 0xef, 0x7c, 0xb6, 0xb3, 0x93, 0x50,
];
